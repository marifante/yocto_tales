name: Build linux images

on:
  push:
    paths:
      - 'src/**'
      - 'requirements.txt'
      - 'setup.py'
      - '.github/workflows/build_linux_images.yml'
      - 'docker/Dockerfile.yocto'
  pull_request:
    types: [opened, reopened]
    paths:
      - 'src/**'
      - 'requirements.txt'
      - 'setup.py'
      - '.github/workflows/build_linux_images.yml'
      - 'docker/Dockerfile.yocto'

# In GitHub Actions pull requests events, the current commit SHA (git rev-parse HEAD) is not
# the same as the commit SHA that triggered the workflow. The current sha obtained from
# git rev-parse HEAD will be the SHA of the merge-commit created by GitHub infrastructure
# during the pull request.
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKERFILE: ${{ github.workspace }}/docker/Dockerfile.yocto
  CURRENT_SHA: ${{ github.event.pull_request.head.sha || github.sha }} # Fallback to github.sha in case we are not in a pull request event
  DOCKER_TAG_PR: ghcr.io/${{ github.event.repository }}:pr-${{ github.event.pull_request.number }}
  DOCKER_TAG_SHA: ghcr.io/${{ github.event.repository }}:${{ github.event.pull_request.head.sha || github.sha }}

jobs:
  build-and-push-docker-image:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    outputs:
      image: ${{ steps.set-outputs.outputs.image }}

    steps:
      - name: 🌀 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # Fetch all history so tags are available
          fetch-tags: true # Ensure tags are fetched

      - name: 🌀 Determine if docker build is needed
        run: |
          DOCKER_BUILD_NEEDED="false"
          FILES_TO_CHECK=( "src/yoctales" "requirements.txt" "setup.py" "Dockerfile.yocto" )

          PREVIOUS_SHA=$(git rev-parse ${{ env.CURRENT_SHA }}^)
          echo "Current SHA: ${{ env.CURRENT_SHA }}, previous SHA: ${PREVIOUS_SHA}"

          CHANGESET=$(git diff --name-only ${PREVIOUS_SHA} ${{ env.CURRENT_SHA }})
          echo "Files that changed in this commit: ${CHANGESET}"

          for FILE in "${FILES_TO_CHECK[@]}"; do
            if echo "$CHANGESET" | grep -q "$FILE"; then
              echo "File $FILE has changed in this commit. Docker build is needed."
              DOCKER_BUILD_NEEDED=true
              break
            fi
          done

          echo "DOCKER_BUILD_NEEDED=${DOCKER_BUILD_NEEDED}" >> $GITHUB_ENV

      - name: 😎 Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🌀 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 📤 Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: 🔨 Build and push Docker image
        if: env.DOCKER_BUILD_NEEDED == 'true'
        id: push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: |
            ${{ env.DOCKER_TAG_PR }}
            ${{ env.DOCKER_TAG_SHA }}
          file: ${{ github.workspace }}/docker/Dockerfile.yocto
          # Use GitHub runner runners UID and GID, see: https://github.com/actions/jekyll-build-pages/issues/18
          build-args: |
            USER_GID=121
            USER_UID=1001

      - name: ✅ Create Job Outputs
        id: set-outputs
        run: |
          image="${{ env.DOCKER_TAG_PR }}"

          if [ ${DOCKER_BUILD_NEEDED} == "false" ]; then
          echo "DOCKER_BUILD_NEEDED is false, docker image creation was skipped. Using latest one: ${image}."
          else
            echo "DOCKER_BUILD_NEEDED is true, docker image was created and pushed. Pushed as ${image}."
          fi
          echo "image=${image}" >> "$GITHUB_OUTPUT"


  build-raspberry-pi-3-minimal:
    runs-on: ubuntu-latest
    needs: [build-and-push-docker-image]
    container:
      image: ${{ needs.build-and-push-docker-image.outputs.image }}

    steps:
      - name: 🌀 Verify container environment
        run: |
          echo "user: $(whoami)"
          echo "UID: $(id -u)"
          echo "GID: $(id -g)"
          echo "Try to create a file to check permissions:"
          echo "This file is just to check permissions" > test_file.txt
          cat test_file.txt

          echo "Checking packages installed with pip inside the container:"
          pip freeze

      - name: 🌀 Download config file
        run: |
          url="https://raw.githubusercontent.com/marifante/yocto_tales/${{ github.sha }}/configs/raspberry_py_3_minimal.yml"
          echo "Downloading config file from ${url}..."
          curl -o ./raspberry_pi_3_minimal.yml "${url}"
          cat ./raspberry_pi_3_minimal.yml

      - name: 🔨 Build image
        run: |
          yoctales --config configs/raspberry_py_3_minimal.yml

      - name: ⬆️  Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: raspberry_pi_3_minimal
          path: work/raspberry_pi_3_minimal/build/tmp/deploy/images/
