on:
  pull_request:
    types: [opened, reopened, synchronize]

# In GitHub Actions pull requests events, the current commit SHA (git rev-parse HEAD) is not
# the same as the commit SHA that triggered the workflow. The current sha obtained from
# git rev-parse HEAD will be the SHA of the merge-commit created by GitHub infrastructure
# during the pull request.
env:
  REGISTRY: ghcr.io
  CURRENT_SHA: ${{ github.event.pull_request.head.sha || github.sha }} # Fallback to github.sha in case we are not in a pull request event

jobs:
  build-and-push-docker-image:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    outputs:
      image: ${{ steps.determine_if_build_is_needed.outputs.image_tag }}

    steps:
      - name: üåÄ Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # Fetch all history so tags are available
          fetch-tags: true # Ensure tags are fetched

      - name: üåÄ Determine metadata
        run: |
          PREVIOUS_SHA=$(git rev-parse ${{ env.CURRENT_SHA }}^)
          echo "Current SHA: ${{ env.CURRENT_SHA }}, previous SHA: ${PREVIOUS_SHA}"
          echo "PREVIOUS_SHA=${PREVIOUS_SHA}" >> $GITHUB_ENV

          CHANGESET=$(git diff --name-only ${PREVIOUS_SHA} ${{ env.CURRENT_SHA }})
          echo "Files that changed in this commit: ${CHANGESET}"
          echo "CHANGESET=${CHANGESET}" >> $GITHUB_ENV

          IMAGE="ghcr.io/${{ github.repository }}"
          CURRENT_SHA_IMAGE="${IMAGE}:${{ env.CURRENT_SHA }}"
          PREVIOUS_SHA_IMAGE="${IMAGE}:${PREVIOUS_SHA}"

          echo "Image related to this PR = ${IMAGE}"
          echo "IMAGE=${IMAGE}" >> "$GITHUB_ENV"
          echo "CURRENT_SHA_IMAGE=${CURRENT_SHA_IMAGE}" >> "$GITHUB_ENV"
          echo "PREVIOUS_SHA_IMAGE=${PREVIOUS_SHA_IMAGE}" >> "$GITHUB_ENV"

      - name: üê≥  Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üê≥ Determine if exists an image from the previous commit
        run: |
          PREVIOUS_SHA_IMAGE_EXISTS="false"
          if docker manifest inspect "${{ env.PREVIOUS_SHA_IMAGE }}" > /dev/null 2>&1; then
            echo "Docker image ${{ env.PREVIOUS_SHA_IMAGE }} exists in the registry."
            PREVIOUS_SHA_IMAGE_EXISTS="true"
          else
            echo "Docker image ${{ env.PREVIOUS_SHA_IMAGE }} does not exist in the registry."
          fi

          echo "PREVIOUS_SHA_IMAGE_EXISTS=${PREVIOUS_SHA_IMAGE_EXISTS}" >> $GITHUB_ENV

      - name: üåÄ Determine if docker-related files changed
        run: |
          DOCKER_FILES_CHANGED="false"
          FILES_TO_CHECK=( "src/yoctales" "requirements.txt" "setup.py" "Dockerfile.yocto" "build_linux_images.yml" )

          for FILE in "${FILES_TO_CHECK[@]}"; do
            if echo "$CHANGESET" | grep -q "$FILE"; then
              echo "File $FILE (which is related to yocto docker image) has changed in this commit."
              DOCKER_FILES_CHANGED=true
              break
            fi
          done

          echo "DOCKER_FILES_CHANGED=${DOCKER_FILES_CHANGED}" >> $GITHUB_ENV

      - name: üåÄ Determine if docker build is needed
        run: |
          DOCKER_BUILD_NEEDED="false"
          if [[ ${{ env.DOCKER_FILES_CHANGED }} == "false" && ${{ env.PREVIOUS_SHA_IMAGE_EXISTS }} == "true" ]]; then
            echo "Docker image files were not modified and an image from the previous commit exists. Skipping docker build."
          else
            echo "Docker image files were modified or an image from previous commit doesn't exists. Cannot skip docker build."
            DOCKER_BUILD_NEEDED="true"
          fi
          echo "DOCKER_BUILD_NEEDED=${DOCKER_BUILD_NEEDED}" >> $GITHUB_ENV

      - name: üê≥  Set up Docker Buildx
        if: ${{ env.DOCKER_BUILD_NEEDED == 'true' }}
        uses: docker/setup-buildx-action@v3

      - name: üê≥ üî® Build and push Docker image
        if: ${{ env.DOCKER_BUILD_NEEDED == 'true' }}
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ env.CURRENT_SHA_IMAGE }}
          file: ${{ github.workspace }}/docker/Dockerfile.yocto
          # Use GitHub runner runners UID and GID, see: https://github.com/actions/jekyll-build-pages/issues/18
          build-args: |
            USER_GID=121
            USER_UID=1001

      - name: ‚¨ÜÔ∏è Pushing latest docker image with current SHA
        if: ${{ env.DOCKER_BUILD_NEEDED == 'false' }}
        run: |
          echo "Pulling previous image ${{ env.PREVIOUS_SHA_IMAGE }}..."
          docker pull ${{ env.PREVIOUS_SHA_IMAGE }}

          echo "Tagging previous image with current SHA..."
          docker tag ${{ env.CURRENT_SHA_IMAGE }}

          echo "Pushing image with current SHA..."
          docker push ${{ env.CURRENT_SHA_IMAGE }}

      - name: üåÄ Tagging image as latest
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
            echo "This commit is being pushed to the default branch. Tagging image as latest."
            docker push ${{ steps.determine_if_build_is_needed.outputs.image }}:latest


